# ------------------------------------------------ #
# !!!   THIS FILE WAS GENERATED BY GRAPHQL     !!! #
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF    !!! #
#             Version: 1.0.0                       #
# ------------------------------------------------ #

type Query {
    post(args: PostArgs!): PostType!
    posts(args: PostsArgs!): PostsType!
}

type PostType implements BaseType {
    id: ID!
    createdAt: DateTime!
    text: String!
    userVote: VoteTypeEnum
    votes: VotesType!
    commentCount: Int!
    comments: [CommentType!]
}

interface BaseType {
    id: ID!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

enum VoteTypeEnum {
    NEGATIVE
    POSITIVE
}

type VotesType {
    negative: [VoteType!]!
    positive: [VoteType!]!
}

type VoteType implements BaseType {
    id: ID!
    type: VoteTypeEnum!
    userId: String!
}

type CommentType implements BaseType {
    id: ID!
    content: String!
    createdAt: DateTime!
}

input PostArgs {
    id: ID!
}

type PostsType {
    list: [PostType!]!
    total: Int!
}

input PostsArgs {
    skip: Int!
}

type Mutation {
    createComment(input: CreateCommentInput!): CreateCommentPayload!
    createVote(input: CreateVoteInput!): CreateVotePayload
    createPost(input: CreatePostInput!): CreatePostPayload!
}

type CreateCommentPayload {
    comment: CommentType!
}

input CreateCommentInput {
    content: String!
    postId: ID!
}

type CreateVotePayload {
    vote: VoteType!
}

input CreateVoteInput {
    postId: ID!
    type: VoteTypeEnum!
    userId: String!
}

type CreatePostPayload {
    post: PostType!
}

input CreatePostInput {
    email: String
    text: String!
}
